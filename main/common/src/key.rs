use serde::{Deserialize, Serialize};
use windows::Win32::UI::Input::KeyboardAndMouse::{self, VIRTUAL_KEY};

#[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, Default, Serialize, Deserialize)]
pub enum Key {
    Escape,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    PrintScreen,
    ScrollLock,
    Pause,
    /// ``` `~ ``` key
    BackTick,
    Key1,
    Key2,
    Key3,
    Key4,
    Key5,
    Key6,
    Key7,
    Key8,
    Key9,
    Key0,
    /// `-_` key
    Minus,
    /// `=+` key
    Equal,
    Backspace,
    Insert,
    Delete,
    Home,
    End,
    PageUp,
    PageDown,
    KeyA,
    KeyB,
    KeyC,
    KeyD,
    KeyE,
    KeyF,
    KeyG,
    KeyH,
    KeyI,
    KeyJ,
    KeyK,
    KeyL,
    KeyM,
    KeyN,
    KeyO,
    KeyP,
    KeyQ,
    KeyR,
    KeyS,
    KeyT,
    KeyU,
    KeyV,
    KeyW,
    KeyX,
    KeyY,
    KeyZ,
    /// `[{` key
    LeftSquareBracket,
    /// `]}` key
    RightSquareBracket,
    /// `\|` key
    BackwardSlash,
    /// `;:` key
    Semicolon,
    /// `'"` key
    Apostrophe,
    /// `,<` key
    Comma,
    /// `.>` key
    Period,
    /// `/?` key
    ForwardSlash,
    Enter,
    Space,
    LeftControl,
    RightControl,
    LeftShift,
    RightShift,
    LeftAlt,
    RightAlt,
    LeftWin,
    RightWin,
    Apps,
    Tab,
    CapsLock,
    /// `↑` key
    Up,
    /// `↓` key
    Down,
    /// `←` key
    Left,
    /// `→` key
    Right,
    NumLock,
    Numpad1,
    Numpad2,
    Numpad3,
    Numpad4,
    Numpad5,
    Numpad6,
    Numpad7,
    Numpad8,
    Numpad9,
    Numpad0,
    NumpadPlus,
    NumpadMinus,
    NumpadMultiply,
    NumpadDivide,
    NumpadSeparator,
    NumpadDot,
    NumpadEnter,
    #[default]
    Unknown,
}

impl Key {
    pub const LAST_KEY: Self = Self::Unknown;

    pub fn to_string(&self) -> String {
        format!("{:?}", self)
    }

    pub fn from_virtual_key(virtual_key: VIRTUAL_KEY, is_extend: bool) -> Self {
        use Key::*;
        use KeyboardAndMouse::*;
        match virtual_key {
            VK_ESCAPE => Escape,
            VK_F1 => F1,
            VK_F2 => F2,
            VK_F3 => F3,
            VK_F4 => F4,
            VK_F5 => F5,
            VK_F6 => F6,
            VK_F7 => F7,
            VK_F8 => F8,
            VK_F9 => F9,
            VK_F10 => F10,
            VK_F11 => F11,
            VK_F12 => F12,
            VK_SNAPSHOT => PrintScreen,
            VK_SCROLL => ScrollLock,
            VK_PAUSE => Pause,
            VK_OEM_3 => BackTick,
            VK_1 => Key1,
            VK_2 => Key2,
            VK_3 => Key3,
            VK_4 => Key4,
            VK_5 => Key5,
            VK_6 => Key6,
            VK_7 => Key7,
            VK_8 => Key8,
            VK_9 => Key9,
            VK_0 => Key0,
            VK_OEM_MINUS => Minus,
            VK_OEM_PLUS => Equal,
            VK_BACK => Backspace,
            VK_INSERT => Insert,
            VK_DELETE => Delete,
            VK_HOME => Home,
            VK_END => End,
            VK_PRIOR => PageUp,
            VK_NEXT => PageDown,
            VK_A => KeyA,
            VK_B => KeyB,
            VK_C => KeyC,
            VK_D => KeyD,
            VK_E => KeyE,
            VK_F => KeyF,
            VK_G => KeyG,
            VK_H => KeyH,
            VK_I => KeyI,
            VK_J => KeyJ,
            VK_K => KeyK,
            VK_L => KeyL,
            VK_M => KeyM,
            VK_N => KeyN,
            VK_O => KeyO,
            VK_P => KeyP,
            VK_Q => KeyQ,
            VK_R => KeyR,
            VK_S => KeyS,
            VK_T => KeyT,
            VK_U => KeyU,
            VK_V => KeyV,
            VK_W => KeyW,
            VK_X => KeyX,
            VK_Y => KeyY,
            VK_Z => KeyZ,
            VK_OEM_4 => LeftSquareBracket,
            VK_OEM_6 => RightSquareBracket,
            VK_OEM_5 => BackwardSlash,
            VK_OEM_1 => Semicolon,
            VK_OEM_7 => Apostrophe,
            VK_OEM_COMMA => Comma,
            VK_OEM_PERIOD => Period,
            VK_OEM_2 => ForwardSlash,
            VK_RETURN => match is_extend {
                true => NumpadEnter,
                false => Enter,
            },
            VK_CONTROL => match is_extend {
                true => RightControl,
                false => LeftControl,
            },
            VK_SHIFT => match is_extend {
                true => RightShift,
                false => LeftShift,
            },
            VK_MENU => match is_extend {
                true => RightAlt,
                false => LeftAlt,
            },
            VK_SPACE => Space,
            VK_LWIN => LeftWin,
            VK_RWIN => RightWin,
            VK_APPS => Apps,
            VK_TAB => Tab,
            VK_CAPITAL => CapsLock,
            VK_UP => Up,
            VK_DOWN => Down,
            VK_LEFT => Left,
            VK_RIGHT => Right,
            VK_NUMLOCK => NumLock,
            VK_NUMPAD1 => Numpad1,
            VK_NUMPAD2 => Numpad2,
            VK_NUMPAD3 => Numpad3,
            VK_NUMPAD4 => Numpad4,
            VK_NUMPAD5 => Numpad5,
            VK_NUMPAD6 => Numpad6,
            VK_NUMPAD7 => Numpad7,
            VK_NUMPAD8 => Numpad8,
            VK_NUMPAD9 => Numpad9,
            VK_NUMPAD0 => Numpad0,
            VK_ADD => NumpadPlus,
            VK_SUBTRACT => NumpadMinus,
            VK_MULTIPLY => NumpadMultiply,
            VK_DIVIDE => NumpadDivide,
            VK_SEPARATOR => NumpadSeparator,
            VK_DECIMAL => NumpadDot,
            _ => Unknown,
        }
    }

    pub fn to_virtual_key(self) -> VIRTUAL_KEY {
        use Key::*;
        use KeyboardAndMouse::*;
        match self {
            Escape => VK_ESCAPE,
            F1 => VK_F1,
            F2 => VK_F2,
            F3 => VK_F3,
            F4 => VK_F4,
            F5 => VK_F5,
            F6 => VK_F6,
            F7 => VK_F7,
            F8 => VK_F8,
            F9 => VK_F9,
            F10 => VK_F10,
            F11 => VK_F11,
            F12 => VK_F12,
            PrintScreen => VK_SNAPSHOT,
            ScrollLock => VK_SCROLL,
            Pause => VK_PAUSE,
            BackTick => VK_OEM_3,
            Key1 => VK_1,
            Key2 => VK_2,
            Key3 => VK_3,
            Key4 => VK_4,
            Key5 => VK_5,
            Key6 => VK_6,
            Key7 => VK_7,
            Key8 => VK_8,
            Key9 => VK_9,
            Key0 => VK_0,
            Minus => VK_OEM_MINUS,
            Equal => VK_OEM_PLUS,
            Backspace => VK_BACK,
            Insert => VK_INSERT,
            Delete => VK_DELETE,
            Home => VK_HOME,
            End => VK_END,
            PageUp => VK_PRIOR,
            PageDown => VK_NEXT,
            KeyA => VK_A,
            KeyB => VK_B,
            KeyC => VK_C,
            KeyD => VK_D,
            KeyE => VK_E,
            KeyF => VK_F,
            KeyG => VK_G,
            KeyH => VK_H,
            KeyI => VK_I,
            KeyJ => VK_J,
            KeyK => VK_K,
            KeyL => VK_L,
            KeyM => VK_M,
            KeyN => VK_N,
            KeyO => VK_O,
            KeyP => VK_P,
            KeyQ => VK_Q,
            KeyR => VK_R,
            KeyS => VK_S,
            KeyT => VK_T,
            KeyU => VK_U,
            KeyV => VK_V,
            KeyW => VK_W,
            KeyX => VK_X,
            KeyY => VK_Y,
            KeyZ => VK_Z,
            LeftSquareBracket => VK_OEM_4,
            RightSquareBracket => VK_OEM_6,
            BackwardSlash => VK_OEM_5,
            Semicolon => VK_OEM_1,
            Apostrophe => VK_OEM_7,
            Comma => VK_OEM_COMMA,
            Period => VK_OEM_PERIOD,
            ForwardSlash => VK_OEM_2,
            Enter => VK_RETURN,
            Space => VK_SPACE,
            LeftControl => VK_LCONTROL,
            RightControl => VK_RCONTROL,
            LeftShift => VK_LSHIFT,
            RightShift => VK_RSHIFT,
            LeftAlt => VK_LMENU,
            RightAlt => VK_RMENU,
            LeftWin => VK_LWIN,
            RightWin => VK_RWIN,
            Apps => VK_APPS,
            Tab => VK_TAB,
            CapsLock => VK_CAPITAL,
            Up => VK_UP,
            Down => VK_DOWN,
            Left => VK_LEFT,
            Right => VK_RIGHT,
            NumLock => VK_NUMLOCK,
            Numpad1 => VK_NUMPAD1,
            Numpad2 => VK_NUMPAD2,
            Numpad3 => VK_NUMPAD3,
            Numpad4 => VK_NUMPAD4,
            Numpad5 => VK_NUMPAD5,
            Numpad6 => VK_NUMPAD6,
            Numpad7 => VK_NUMPAD7,
            Numpad8 => VK_NUMPAD8,
            Numpad9 => VK_NUMPAD9,
            Numpad0 => VK_NUMPAD0,
            NumpadPlus => VK_ADD,
            NumpadMinus => VK_SUBTRACT,
            NumpadMultiply => VK_MULTIPLY,
            NumpadDivide => VK_DIVIDE,
            NumpadSeparator => VK_SEPARATOR,
            NumpadDot => VK_DECIMAL,
            NumpadEnter => VK_RETURN,
            Unknown => Default::default(),
        }
    }

    pub fn iter() -> impl DoubleEndedIterator<Item = Self> + Clone {
        (0..=Self::LAST_KEY as u8).map(|v| unsafe { std::mem::transmute::<u8, Self>(v) })
    }
}

impl std::fmt::Display for Key {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{:?}", self)
    }
}

#[cfg(test)]
mod tests {
    use super::Key;

    #[test]
    fn t1() {
        let vec: Vec<_> = Key::iter()
            .map(|x| {
                let k = x.to_virtual_key();
                println!("{:?}", k);
                k
            })
            .collect();
        vec.into_iter()
            .for_each(|vk| println!("{}", Key::from_virtual_key(vk, false)));
    }
}
